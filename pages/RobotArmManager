export default class RobotArmManager {
  constructor() {
    this._name = "Nameless";
    this._speed = 1;
    this._commandsArm1 = [ 0, 0, 10, 0, -1, 0 ];
    this._commandsArm2 = [ 0, 0, 10, 0, -1, 0 ];
    this._commandsArm3 = [ 0, 0, 10, 0, -1, 0 ];
    this._commandsArm4 = [ 0, 0, 10, 0, -1, 0 ];
    this._commandsArm5 = [ 0, 0, 10, 0, -1, 0 ];
    this._commandsArm6 = [ 0, 0, 10, 0, -1, 0 ];
    /*
    this._commandsArm1 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
    this._commandsArm2 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
    this._commandsArm3 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
    this._commandsArm4 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
    this._commandsArm5 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
    this._commandsArm6 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
    */
    this._frame = 0;
    // this._yearOffset = 0;
  }
  get name() { return this._name; }
  set name(val) { this._name = val; }

  get speed() { return this._speed; }
  set speed(val) { this._speed = val; }
  
  get frame() { return this._frame; }
  set frame(val) { this._frame = val; }

  get commandsArm1() { return this._commandsArm1; }
  set commandsArm1(val) { this._commandsArm1 = val; }
  
  get commandsArm2() { return this._commandsArm2; }
  set commandsArm2(val) { this._commandsArm2 = val; }
  
  get commandsArm3() { return this._commandsArm3; }
  set commandsArm3(val) { this._commandsArm3 = val; }
  
  get commandsArm4() { return this._commandsArm4; }
  set commandsArm4(val) { this._commandsArm4 = val; }
  
  get commandsArm5() { return this._commandsArm5; }
  set commandsArm5(val) { this._commandsArm5 = val; }
  
  get commandsArm6() { return this._commandsArm6; }
  set commandsArm6(val) { this._commandsArm6 = val; }
  
  SendAnimationCommand() {
    //console.log(this._commandsArm1);
    return `{"name":"${this.name}","speed":${this.speed},"commandsArm1":[${this.commandsArm1}],"commandsArm2":[${this.commandsArm2}],"commandsArm3":[${this.commandsArm3}],"commandsArm4":[${this.commandsArm4}],"commandsArm5":[${this.commandsArm5}],"commandsArm6":[${this.commandsArm6}],"frame":${this.frame},"kf":[0]}`;
    //return `{"name":"${this.name}","speed":${this.speed},"commandsArm1":[${this.commandsArm1}],"commandsArm2":[${this.commandsArm2}],"commandsArm3":[${this.commandsArm3}],"commandsArm4":[${this.commandsArm4}],"commandsArm5":[${this.commandsArm5}],"commandsArm6":[${this.commandsArm6}],"frame":${this.frame}},"keyFrameIndices":[${keyFrameIndicesToSave}]`;
  }
  MakeFileToSave_Signal(keyFrameIndicesToSave) { // TODO LIV - make this better/redo this in phase 3
    //console.log(this._commandsArm1);
    return `{"name":"${this.name}","speed":${this.speed},"commandsArm1":[${this.commandsArm1}],"commandsArm2":[${this.commandsArm2}],"commandsArm3":[${this.commandsArm3}],"commandsArm4":[${this.commandsArm4}],"commandsArm5":[${this.commandsArm5}],"commandsArm6":[${this.commandsArm6}],"frame":${this.frame},"keyFrameIndices":[${keyFrameIndicesToSave}]}`;
  }
  createAnimationFiles() {
    let commandsArm = [[], [], [], [], [], []];
    for (var i = 0; i < 20; i++) {
      commandsArm[0].push(0);
      commandsArm[1].push(0);
      commandsArm[2].push(0);
      commandsArm[3].push(0);
      commandsArm[4].push(0);
      commandsArm[5].push(0);
    }
    this._commandsArm1 = commandsArm[0];
    this._commandsArm2 = commandsArm[1];
    this._commandsArm3 = commandsArm[2];
    this._commandsArm4 = commandsArm[3];
    this._commandsArm5 = commandsArm[4];
    this._commandsArm6 = commandsArm[5];
    console.log(this._commandsArm1);
  }
  //updates for you the particular entry of a clip
  AnimationUpdate(particularArm, newEntry) {
    //console.log(this.commandsArm1);
    this["commandsArm" + particularArm][this._frame] = newEntry;
  }

  DoInterpolation(keyframes) {
    console.log("[1] " + this._commandsArm1.join(", "));
    console.log("[2] " + this._commandsArm2.join(", "));
    console.log("[3] " + this._commandsArm3.join(", "));
    console.log("[4] " + this._commandsArm4.join(", "));
    console.log("[5] " + this._commandsArm5.join(", "));
    console.log("[6] " + this._commandsArm6.join(", "));
  }

  SetPoseForFrame(poseValues, frameNumber) { // TODO LIV maybe not
    this._commandsArm1[frameNumber] = poseValues[1];
    this._commandsArm2[frameNumber] = poseValues[2];
    this._commandsArm3[frameNumber] = poseValues[3];
    this._commandsArm4[frameNumber] = poseValues[4];
    this._commandsArm5[frameNumber] = poseValues[5];
    this._commandsArm6[frameNumber] = poseValues[6];
  }

  GetPoseForFrame(frameNumber) { // TODO LIV maybe not
    return [
      this["commandsArm" + 1][frameNumber],
      this["commandsArm" + 2][frameNumber],
      this["commandsArm" + 3][frameNumber],
      this["commandsArm" + 4][frameNumber],
      this["commandsArm" + 5][frameNumber],
      this["commandsArm" + 6][frameNumber]
    ];
  }

  //updates for you the particular entry of a clip
  AnimationFrameReceive(particularArm) {
    let myReturn = 0;
    console.log(particularArm);
    if (this["commandsArm" + particularArm] !== undefined) {
      myReturn = this["commandsArm" + particularArm][this._frame];
      //console.log(myReturn);
      return myReturn;
    } else {
      return 0;
    }
  }
}